{"example_id": "real_compact_0000", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger counter: Uint<64>;\n\nexport circuit increment(amount: Uint<64>): [] {\n  counter = amount;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0001", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0002", "code": "pragma language_version >= 0.14.0;\n\nmodule Ledger {\n  import CompactStandardLibrary;\n\n  export struct Data {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit verify(input: Bytes<32>): Bytes<32> {\n    return persistent_hash<Bytes<32>>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0003", "code": "pragma language_version >= 0.14.0;\n\nmodule Ledger {\n  import CompactStandardLibrary;\n\n  export struct Data {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit compute(input: CurvePoint): Bytes<32> {\n    return persistent_hash<CurvePoint>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0004", "code": "pragma language_version >= 0.14.0;\n\nmodule Utils {\n  import CompactStandardLibrary;\n\n  export struct Data {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit verify(input: Field): CurvePoint {\n    return ec_mul_generator(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0005", "code": "pragma language_version >= 0.14.0;\n\nmodule Ledger {\n  import CompactStandardLibrary;\n\n  export struct Data {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit hash(input: CurvePoint): Bytes<32> {\n    return persistent_hash<CurvePoint>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0006", "code": "pragma language_version >= 0.14.0;\n\nmodule Utils {\n  import CompactStandardLibrary;\n\n  export struct Record {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit hash(input: CurvePoint): Bytes<32> {\n    return persistent_hash<CurvePoint>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0007", "code": "pragma language_version >= 0.14.0;\n\nmodule Crypto {\n  import CompactStandardLibrary;\n\n  export struct Key {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit compute(input: Uint<64>): Field {\n    const field_val: Field = input as Field;\n    return field_val;\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0008", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0009", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0010", "code": "pragma language_version >= 0.14.0;\n\nmodule Crypto {\n  import CompactStandardLibrary;\n\n  export struct Key {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit compute(input: Field): CurvePoint {\n    return ec_mul_generator(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0011", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0012", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0013", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0014", "code": "pragma language_version >= 0.14.0;\n\nmodule Ledger {\n  import CompactStandardLibrary;\n\n  export struct Data {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit compute(input: Field): CurvePoint {\n    return ec_mul_generator(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0015", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0016", "code": "pragma language_version >= 0.14.0;\n\nmodule Crypto {\n  import CompactStandardLibrary;\n\n  export struct Signature {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit hash(input: CurvePoint): Bytes<32> {\n    return persistent_hash<CurvePoint>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0017", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger counter: Uint<64>;\n\nexport circuit increment(amount: Uint<64>): [] {\n  counter = amount;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0018", "code": "pragma language_version >= 0.14.0;\n\nmodule Math {\n  import CompactStandardLibrary;\n\n  export struct Record {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit verify(input: CurvePoint): Bytes<32> {\n    return persistent_hash<CurvePoint>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0019", "code": "pragma language_version >= 0.14.0;\n\nmodule Math {\n  import CompactStandardLibrary;\n\n  export struct Data {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit process(input: Uint<64>): Field {\n    const field_val: Field = input as Field;\n    return field_val;\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0020", "code": "pragma language_version >= 0.14.0;\n\nmodule Crypto {\n  import CompactStandardLibrary;\n\n  export struct Record {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit process(input: Field): CurvePoint {\n    return ec_mul_generator(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0021", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0022", "code": "pragma language_version >= 0.14.0;\n\nmodule Math {\n  import CompactStandardLibrary;\n\n  export struct Record {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit hash(input: CurvePoint): Bytes<32> {\n    return persistent_hash<CurvePoint>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0023", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0024", "code": "pragma language_version >= 0.14.0;\n\nmodule Ledger {\n  import CompactStandardLibrary;\n\n  export struct Key {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit hash(input: CurvePoint): Bytes<32> {\n    return persistent_hash<CurvePoint>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_0"}
{"example_id": "real_compact_0025", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0026", "code": "pragma language_version >= 0.14.0;\n\nmodule Crypto {\n  import CompactStandardLibrary;\n\n  export struct Record {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit compute(input: CurvePoint): Bytes<32> {\n    return persistent_hash<CurvePoint>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0027", "code": "pragma language_version >= 0.14.0;\n\nmodule Crypto {\n  import CompactStandardLibrary;\n\n  export struct Signature {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit process(input: Uint<64>): Field {\n    const field_val: Field = input as Field;\n    return field_val;\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0028", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0029", "code": "pragma language_version >= 0.14.0;\n\nmodule Crypto {\n  import CompactStandardLibrary;\n\n  export struct Signature {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit verify(input: Bytes<32>): Bytes<32> {\n    return persistent_hash<Bytes<32>>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0030", "code": "pragma language_version >= 0.14.0;\n\nmodule Crypto {\n  import CompactStandardLibrary;\n\n  export struct Key {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit hash(input: CurvePoint): Bytes<32> {\n    return persistent_hash<CurvePoint>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0031", "code": "pragma language_version >= 0.14.0;\n\nmodule Crypto {\n  import CompactStandardLibrary;\n\n  export struct Record {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit compute(input: Field): CurvePoint {\n    return ec_mul_generator(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0032", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger counter: Uint<64>;\n\nexport circuit increment(amount: Uint<64>): [] {\n  counter = amount;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0033", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0034", "code": "pragma language_version >= 0.14.0;\n\nmodule Crypto {\n  import CompactStandardLibrary;\n\n  export struct Signature {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit process(input: CurvePoint): Bytes<32> {\n    return persistent_hash<CurvePoint>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0035", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0036", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger counter: Uint<64>;\n\nexport circuit increment(amount: Uint<64>): [] {\n  counter = amount;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0037", "code": "pragma language_version >= 0.14.0;\n\nmodule Math {\n  import CompactStandardLibrary;\n\n  export struct Signature {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit process(input: Bytes<32>): Bytes<32> {\n    return persistent_hash<Bytes<32>>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0038", "code": "pragma language_version >= 0.14.0;\n\nmodule Utils {\n  import CompactStandardLibrary;\n\n  export struct Data {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit process(input: Field): CurvePoint {\n    return ec_mul_generator(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0039", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger counter: Uint<64>;\n\nexport circuit increment(amount: Uint<64>): [] {\n  counter = amount;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0040", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger counter: Uint<64>;\n\nexport circuit increment(amount: Uint<64>): [] {\n  counter = amount;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0041", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0042", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0043", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0044", "code": "pragma language_version >= 0.14.0;\n\nmodule Ledger {\n  import CompactStandardLibrary;\n\n  export struct Signature {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit compute(input: Bytes<32>): Bytes<32> {\n    return persistent_hash<Bytes<32>>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0045", "code": "pragma language_version >= 0.14.0;\n\nmodule Ledger {\n  import CompactStandardLibrary;\n\n  export struct Data {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit compute(input: Bytes<32>): Bytes<32> {\n    return persistent_hash<Bytes<32>>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0046", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0047", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger counter: Uint<64>;\n\nexport circuit increment(amount: Uint<64>): [] {\n  counter = amount;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0048", "code": "pragma language_version >= 0.14.0;\n\nmodule Crypto {\n  import CompactStandardLibrary;\n\n  export struct Signature {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit hash(input: Uint<64>): Field {\n    const field_val: Field = input as Field;\n    return field_val;\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0049", "code": "pragma language_version >= 0.14.0;\n\nmodule Ledger {\n  import CompactStandardLibrary;\n\n  export struct Data {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit compute(input: CurvePoint): Bytes<32> {\n    return persistent_hash<CurvePoint>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_1"}
{"example_id": "real_compact_0050", "code": "pragma language_version >= 0.14.0;\n\nmodule Ledger {\n  import CompactStandardLibrary;\n\n  export struct Data {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit hash(input: Uint<64>): Field {\n    const field_val: Field = input as Field;\n    return field_val;\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0051", "code": "pragma language_version >= 0.14.0;\n\nmodule Ledger {\n  import CompactStandardLibrary;\n\n  export struct Signature {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit process(input: Field): CurvePoint {\n    return ec_mul_generator(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0052", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger counter: Uint<64>;\n\nexport circuit increment(amount: Uint<64>): [] {\n  counter = amount;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0053", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger counter: Uint<64>;\n\nexport circuit increment(amount: Uint<64>): [] {\n  counter = amount;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0054", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0055", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0056", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0057", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0058", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0059", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0060", "code": "pragma language_version >= 0.14.0;\n\nmodule Crypto {\n  import CompactStandardLibrary;\n\n  export struct Record {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit compute(input: Bytes<32>): Bytes<32> {\n    return persistent_hash<Bytes<32>>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0061", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0062", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0063", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0064", "code": "pragma language_version >= 0.14.0;\n\nmodule Ledger {\n  import CompactStandardLibrary;\n\n  export struct Key {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit hash(input: Uint<64>): Field {\n    const field_val: Field = input as Field;\n    return field_val;\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0065", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0066", "code": "pragma language_version >= 0.14.0;\n\nmodule Utils {\n  import CompactStandardLibrary;\n\n  export struct Signature {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit compute(input: Uint<64>): Field {\n    const field_val: Field = input as Field;\n    return field_val;\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0067", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0068", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0069", "code": "pragma language_version >= 0.14.0;\n\nmodule Crypto {\n  import CompactStandardLibrary;\n\n  export struct Signature {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit process(input: Bytes<32>): Bytes<32> {\n    return persistent_hash<Bytes<32>>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0070", "code": "pragma language_version >= 0.14.0;\n\nmodule Math {\n  import CompactStandardLibrary;\n\n  export struct Data {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit verify(input: Uint<64>): Field {\n    const field_val: Field = input as Field;\n    return field_val;\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0071", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0072", "code": "pragma language_version >= 0.14.0;\n\nmodule Ledger {\n  import CompactStandardLibrary;\n\n  export struct Signature {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit process(input: Field): CurvePoint {\n    return ec_mul_generator(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0073", "code": "pragma language_version >= 0.14.0;\n\nmodule Utils {\n  import CompactStandardLibrary;\n\n  export struct Data {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit hash(input: Uint<64>): Field {\n    const field_val: Field = input as Field;\n    return field_val;\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0074", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_2"}
{"example_id": "real_compact_0075", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0076", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger counter: Uint<64>;\n\nexport circuit increment(amount: Uint<64>): [] {\n  counter = amount;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0077", "code": "pragma language_version >= 0.14.0;\n\nmodule Utils {\n  import CompactStandardLibrary;\n\n  export struct Record {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit verify(input: Bytes<32>): Bytes<32> {\n    return persistent_hash<Bytes<32>>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0078", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0079", "code": "pragma language_version >= 0.14.0;\n\nmodule Crypto {\n  import CompactStandardLibrary;\n\n  export struct Key {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit process(input: Field): CurvePoint {\n    return ec_mul_generator(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0080", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger balance: Uint<64>;\n\nexport circuit set(new_value: Uint<64>): [] {\n  balance = new_value;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0081", "code": "pragma language_version >= 0.14.0;\n\nmodule Utils {\n  import CompactStandardLibrary;\n\n  export struct Key {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit hash(input: Uint<64>): Field {\n    const field_val: Field = input as Field;\n    return field_val;\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0082", "code": "pragma language_version >= 0.14.0;\n\nmodule Crypto {\n  import CompactStandardLibrary;\n\n  export struct Key {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit process(input: Field): CurvePoint {\n    return ec_mul_generator(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0083", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger counter: Uint<64>;\n\nexport circuit increment(amount: Uint<64>): [] {\n  counter = amount;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0084", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger counter: Uint<64>;\n\nexport circuit increment(amount: Uint<64>): [] {\n  counter = amount;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0085", "code": "pragma language_version >= 0.14.0;\n\nmodule Ledger {\n  import CompactStandardLibrary;\n\n  export struct Data {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit compute(input: Field): CurvePoint {\n    return ec_mul_generator(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0086", "code": "pragma language_version >= 0.14.0;\n\nmodule Utils {\n  import CompactStandardLibrary;\n\n  export struct Record {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit compute(input: Bytes<32>): Bytes<32> {\n    return persistent_hash<Bytes<32>>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0087", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger counter: Uint<64>;\n\nexport circuit increment(amount: Uint<64>): [] {\n  counter = amount;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0088", "code": "pragma language_version >= 0.14.0;\n\nmodule Ledger {\n  import CompactStandardLibrary;\n\n  export struct Record {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit verify(input: Uint<64>): Field {\n    const field_val: Field = input as Field;\n    return field_val;\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0089", "code": "pragma language_version >= 0.14.0;\n\nmodule Math {\n  import CompactStandardLibrary;\n\n  export struct Signature {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit verify(input: Uint<64>): Field {\n    const field_val: Field = input as Field;\n    return field_val;\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0090", "code": "pragma language_version >= 0.14.0;\n\nmodule Utils {\n  import CompactStandardLibrary;\n\n  export struct Data {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit process(input: Bytes<32>): Bytes<32> {\n    return persistent_hash<Bytes<32>>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0091", "code": "pragma language_version >= 0.14.0;\n\nmodule Crypto {\n  import CompactStandardLibrary;\n\n  export struct Record {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit verify(input: CurvePoint): Bytes<32> {\n    return persistent_hash<CurvePoint>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0092", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0093", "code": "pragma language_version >= 0.14.0;\n\nmodule Ledger {\n  import CompactStandardLibrary;\n\n  export struct Data {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit hash(input: Bytes<32>): Bytes<32> {\n    return persistent_hash<Bytes<32>>(input);\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0094", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger counter: Uint<64>;\n\nexport circuit increment(amount: Uint<64>): [] {\n  counter = amount;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0095", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger counter: Uint<64>;\n\nexport circuit increment(amount: Uint<64>): [] {\n  counter = amount;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0096", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0097", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0098", "code": "pragma language_version >= 0.14.0;\n\nmodule Ledger {\n  import CompactStandardLibrary;\n\n  export struct Data {\n    field1: Bytes<32>;\n    field2: Field;\n  }\n\n  export pure circuit compute(input: Uint<64>): Field {\n    const field_val: Field = input as Field;\n    return field_val;\n  }\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}
{"example_id": "real_compact_0099", "code": "pragma language_version >= 0.14.0;\n\nimport CompactStandardLibrary;\nexport { CurvePoint }\n\nexport ledger data: Bytes<32>;\n\nexport circuit update(input: Bytes<32>): [] {\n  data = input;\n}", "source": "real_compact_generator", "is_valid": true, "generated_at": "batch_3"}

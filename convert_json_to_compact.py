#!/usr/bin/env python3
"""
Convert JSON contracts to individual .compact files

Reads contracts from data/real_compact_contracts.jsonl and saves each as a separate .compact file.
"""

import json
import os
from pathlib import Path


def convert_json_to_compact_files(input_file: str, output_dir: str) -> None:
    """Convert JSONL contracts to individual .compact files."""
    
    # Create output directory if it doesn't exist
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    contracts_converted = 0
    
    print(f"🔄 Converting contracts from {input_file} to {output_dir}/")
    print("=" * 60)
    
    try:
        with open(input_file, 'r') as f:
            for line_num, line in enumerate(f, 1):
                try:
                    # Parse JSON line
                    contract_data = json.loads(line.strip())
                    
                    # Extract contract information
                    example_id = contract_data.get('example_id', f'contract_{line_num:04d}')
                    code = contract_data.get('code', '')
                    source = contract_data.get('source', 'unknown')
                    is_valid = contract_data.get('is_valid', False)
                    batch = contract_data.get('generated_at', 'unknown')
                    
                    if not code:
                        print(f"⚠️  Skipping {example_id}: No code content")
                        continue
                    
                    # Create filename based on example_id
                    filename = f"{example_id}.compact"
                    filepath = os.path.join(output_dir, filename)
                    
                    # Add header comment with metadata
                    header = f"""/*
 * Contract ID: {example_id}
 * Source: {source}
 * Batch: {batch}
 * Valid: {is_valid}
 * Generated by CompactLoRa
 */

"""
                    
                    # Write contract to .compact file
                    with open(filepath, 'w') as contract_file:
                        contract_file.write(header + code)
                    
                    contracts_converted += 1
                    
                    if contracts_converted % 10 == 0:
                        print(f"✅ Converted {contracts_converted} contracts...")
                    
                except json.JSONDecodeError as e:
                    print(f"❌ Error parsing line {line_num}: {e}")
                    continue
                except Exception as e:
                    print(f"❌ Error processing line {line_num}: {e}")
                    continue
    
    except FileNotFoundError:
        print(f"❌ Input file not found: {input_file}")
        return
    except Exception as e:
        print(f"❌ Error reading input file: {e}")
        return
    
    print("=" * 60)
    print(f"🎯 Successfully converted {contracts_converted} contracts to .compact files!")
    print(f"📁 Output directory: {output_dir}/")
    
    # List some example files
    compact_files = list(Path(output_dir).glob("*.compact"))
    if compact_files:
        print(f"📋 Example files created:")
        for i, file in enumerate(sorted(compact_files)[:5]):
            print(f"   • {file.name}")
        if len(compact_files) > 5:
            print(f"   ... and {len(compact_files) - 5} more files")


def main():
    """Main conversion function."""
    input_file = "data/real_compact_contracts.jsonl"
    output_dir = "generated_contracts"
    
    print("🚀 COMPACT CONTRACT CONVERTER")
    print("Converting JSON contracts to .compact files")
    print()
    
    convert_json_to_compact_files(input_file, output_dir)


if __name__ == "__main__":
    main() 